---
import Layout from '../../layouts/Layout.astro';
import { collection, getDocs, db } from '../../firabase';

// Check authentication and admin status
if (!Astro.cookies.get('auth')) {
  return Astro.redirect('/login');
}

const userType = Astro.cookies.get('userType')?.value;
if (userType !== 'admin') {
  return Astro.redirect('/login');
}

const url = new URL(Astro.request.url);
const filtro = url.searchParams.get('barbero') || 'general';

interface Cita {
  id: string;
  nombre: string;
  telefono: string;
  paquete: string;
  fecha: string;
  hora: string;
  barbero: string;
}

interface Barbero {
  id: string;
  nombre: string;
  especialidad: string;
  experiencia: string;
}

let citas: Cita[] = [];
let barberos: Barbero[] = [];

try {
  // Get all barbers
  const barberosSnapshot = await getDocs(collection(db, 'barberos'));
  barberos = barberosSnapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  })) as Barbero[];

  // Get all appointments
  const citasSnapshot = await getDocs(collection(db, 'citas'));
  citas = citasSnapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  })) as Cita[];
} catch (error) {
  console.error('Error fetching data:', error);
}

// Filtrar solo citas pendientes (futuras o de hoy)
const hoy = new Date();
hoy.setHours(0, 0, 0, 0);
let citasPendientes: Cita[] = citas.filter((cita) => {
  // cita.fecha formato: "YYYY-MM-DD"
  const fechaCita = new Date(cita.fecha + 'T00:00:00');
  return fechaCita >= hoy;
});

let citasFiltradas: Cita[] = citasPendientes;
if (filtro !== 'general') {
  citasFiltradas = citasPendientes.filter((cita: Cita) => cita.barbero === filtro);
}
---

<Layout title="Panel Admin | Gentleman's Barber">
  <style is:global>
    :root {
      --primary-color: #1a1a1a;
      --secondary-color: #333333;
      --accent-color: #c8a97e;
      --text-color: #f5f5f5;
      --light-gray: #888888;
    }
    .dashboard-container {
      display: flex;
      min-height: 100vh;
      width: 100%;
      background: linear-gradient(135deg, var(--primary-color), #2d2d2d);
      color: var(--text-color);
      font-family: 'Playfair Display', serif;
    }
    .sidebar {
      background: linear-gradient(135deg, rgba(51, 51, 51, 0.95), rgba(26, 26, 26, 0.95));
      backdrop-filter: blur(20px);
      min-width: 240px;
      max-width: 240px;
      padding: 2rem 1.5rem;
      border-right: 1px solid rgba(200, 169, 126, 0.3);
      height: 100vh;
      position: sticky;
      top: 0;
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
      z-index: 10;
    }
    .sidebar h3 {
      color: var(--accent-color);
      margin-bottom: 1.5rem;
      font-size: 1.2rem;
      font-weight: bold;
      letter-spacing: 0.5px;
    }
    .sidebar a {
      color: var(--text-color);
      text-decoration: none;
      display: block;
      padding: 1rem 1.2rem;
      border-radius: 12px;
      transition: all 0.3s ease;
      font-size: 1rem;
      margin-bottom: 0.5rem;
      border: 1px solid rgba(200, 169, 126, 0.1);
      background: rgba(200, 169, 126, 0.05);
    }
    .sidebar a:hover,
    .sidebar a.active {
      background: linear-gradient(45deg, var(--accent-color), #d1b894);
      color: var(--primary-color);
      border-color: var(--accent-color);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(200, 169, 126, 0.3);
    }
    .main-content {
      flex: 1;
      padding: 2.5rem 2rem;
      background: var(--primary-color);
    }
    .main-content h2 {
      background: linear-gradient(45deg, var(--accent-color), #d1b894);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-size: 2.2rem;
      margin-bottom: 2rem;
      font-weight: 700;
      letter-spacing: 1px;
    }
    .card {
      background: linear-gradient(135deg, rgba(51, 51, 51, 0.9), rgba(26, 26, 26, 0.9));
      backdrop-filter: blur(10px);
      border-radius: 16px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
      border: 1px solid rgba(200, 169, 126, 0.2);
      font-size: 1.1rem;
      color: var(--text-color);
      transition: all 0.3s ease;
    }
    .card strong {
      background: linear-gradient(45deg, var(--accent-color), #d1b894);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-weight: 700;
      font-size: 1.2rem;
    }
    @media (max-width: 800px) {
      .dashboard-container {
        flex-direction: column;
      }
      .sidebar {
        height: auto;
        flex-direction: row;
        overflow-x: auto;
        justify-content: start;
        border-right: none;
        border-bottom: 1px solid var(--accent-color);
        padding: 1rem 0.5rem;
        min-width: 0;
        max-width: 100vw;
      }
      .sidebar h3 {
        display: none;
      }
      .sidebar a {
        white-space: nowrap;
        padding: 0.7rem 1rem;
        font-size: 0.95rem;
      }
      .main-content {
        padding: 1.5rem 1rem;
      }
    }

    @media (max-width: 480px) {
      .dashboard-container {
        flex-direction: column;
      }
      .sidebar {
        padding: 0.8rem 0.3rem;
        gap: 0.5rem;
      }
      .sidebar a {
        padding: 0.6rem 0.8rem;
        font-size: 0.85rem;
        margin-bottom: 0.2rem;
      }
      .main-content {
        padding: 1rem 0.8rem;
      }
      .main-content h2 {
        font-size: 1.5rem;
        margin-bottom: 1.5rem;
      }
      .card {
        padding: 1rem 0.8rem;
        margin-bottom: 1rem;
        font-size: 0.95rem;
      }
      .card strong {
        font-size: 1rem;
      }
    }

    @media (max-width: 360px) {
      .sidebar a {
        padding: 0.5rem 0.6rem;
        font-size: 0.8rem;
      }
      .main-content h2 {
        font-size: 1.3rem;
      }
      .card {
        padding: 0.8rem 0.6rem;
        font-size: 0.9rem;
      }
    }
  </style>

  <div class="dashboard-container">
    <nav class="sidebar">
      <h3>Filtrar por barbero</h3>
      <a href="/admin" class={filtro === 'general' ? 'active' : ''}>General</a>
      {barberos.map(b => (
        <a href={`/admin?barbero=${encodeURIComponent(b.id)}`} class={filtro === b.id ? 'active' : ''}>
          {b.nombre}
        </a>
      ))}
    </nav>
    <main class="main-content">
      <h2>Citas {filtro === 'general' ? 'Pendientes' : `de ${barberos.find(b => b.id === filtro)?.nombre || 'Barbero'}`}</h2>
      {citasFiltradas.length === 0 ? (
        <p>No hay citas pendientes.</p>
      ) : (
        <div>
          {citasFiltradas.map((cita: Cita) => (
            <div class="card">
              <strong>{cita.nombre}</strong> - {cita.telefono}<br />
              Paquete: {cita.paquete}<br />
              Fecha: {cita.fecha} a las {cita.hora}<br />
              Barbero: {barberos.find(b => b.id === cita.barbero)?.nombre || 'No asignado'}
            </div>
          ))}
        </div>
      )}
    </main>
  </div>
</Layout>